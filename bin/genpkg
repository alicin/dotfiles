#!/bin/bash

# Profile-based package dumping script
# Usage: genpkg [--dry-run|-n] <profile_name>
# Example: genpkg discobot-darwin
# Example: genpkg --dry-run discobot-darwin

DRY_RUN=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --dry-run|-n)
            DRY_RUN=true
            shift
            ;;
        *)
            PROFILE_NAME="$1"
            shift
            ;;
    esac
done

if [ -z "$PROFILE_NAME" ]; then
    echo "Usage: $0 [--dry-run|-n] <profile_name>"
    echo "Available profiles:"
    ls -1 profiles/ | grep -v '^\.' 2>/dev/null || echo "  No profiles found"
    echo ""
    echo "Options:"
    echo "  --dry-run, -n    Show what would be done without executing"
    exit 1
fi

PROFILE_DIR="profiles/$PROFILE_NAME"
PROFILE_JSON="$PROFILE_DIR/profile.json"
PACKAGES_DIR="$PROFILE_DIR/packages"

# Check if profile exists
if [ ! -f "$PROFILE_JSON" ]; then
    echo "Error: Profile '$PROFILE_NAME' not found"
    echo "Expected profile file: $PROFILE_JSON"
    exit 1
fi

if [ "$DRY_RUN" = true ]; then
    echo "üîç DRY RUN: Showing what would be done for profile: $PROFILE_NAME"
else
    echo "üîÑ Dumping packages for profile: $PROFILE_NAME"
fi

# Create packages directory if it doesn't exist
if [ "$DRY_RUN" = true ]; then
    echo "üìÅ Would create directory: $PACKAGES_DIR (if not exists)"
else
    mkdir -p "$PACKAGES_DIR"
fi

# Clear existing package files
if [ "$DRY_RUN" = true ]; then
    echo "üßπ Would clear existing package files in: $PACKAGES_DIR"
    if [ -d "$PACKAGES_DIR" ] && [ "$(ls -A "$PACKAGES_DIR" 2>/dev/null)" ]; then
        echo "   Files that would be removed:"
        ls -1 "$PACKAGES_DIR" | sed 's/^/     /'
    else
        echo "   No existing files to remove"
    fi
else
    echo "üßπ Clearing existing package files..."
    rm -rf "$PACKAGES_DIR"/*
fi

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check if package manager is enabled in profile
is_package_manager_enabled() {
    local pm="$1"
    # Use jq to check if package manager is enabled, fallback to grep if jq not available
    if command_exists jq; then
        jq -r ".package_managers.$pm.enabled // false" "$PROFILE_JSON" 2>/dev/null | grep -q "true"
    else
        grep -q "\"$pm\"" "$PROFILE_JSON" 2>/dev/null
    fi
}

# Function to get package manager filename from profile
get_package_manager_file() {
    local pm="$1"
    if command_exists jq; then
        jq -r ".package_managers.$pm.file // \"$pm.txt\"" "$PROFILE_JSON" 2>/dev/null
    else
        # Fallback to default naming
        case "$pm" in
            "homebrew") echo "Brewfile" ;;
            "dnf") echo "dnf.txt" ;;
            "pacman") echo "pacman.txt" ;;
            "yay") echo "aur.txt" ;;
            "flatpak") echo "flatpak.txt" ;;
            *) echo "$pm.txt" ;;
        esac
    fi
}

# Homebrew
if is_package_manager_enabled "homebrew"; then
    BREWFILE=$(get_package_manager_file "homebrew")
    if command_exists brew; then
        if [ "$DRY_RUN" = true ]; then
            echo "üì¶ Would dump Homebrew packages to $BREWFILE using: brew bundle dump --force"
        else
            echo "üì¶ Dumping Homebrew packages to $BREWFILE..."
            cd "$PACKAGES_DIR" && brew bundle dump --force
            echo "‚úÖ Homebrew packages dumped"
        fi
    else
        if [ "$DRY_RUN" = true ]; then
            echo "‚ö†Ô∏è  Would skip Homebrew (brew command not found)"
        fi
    fi
fi

# DNF (Fedora)
if is_package_manager_enabled "dnf"; then
    DNF_FILE=$(get_package_manager_file "dnf")
    if command_exists dnf; then
        if [ "$DRY_RUN" = true ]; then
            echo "üì¶ Would dump DNF packages to $DNF_FILE using: dnf list installed --quiet"
        else
            echo "üì¶ Dumping DNF packages to $DNF_FILE..."
            dnf list installed --quiet | awk '{print $1}' | sed 's/\.[^.]*$//' > "$PACKAGES_DIR/$DNF_FILE"
            echo "‚úÖ DNF packages dumped"
        fi
    else
        if [ "$DRY_RUN" = true ]; then
            echo "‚ö†Ô∏è  Would skip DNF (dnf command not found)"
        fi
    fi
fi

# Pacman (Arch Linux)
if is_package_manager_enabled "pacman"; then
    PACMAN_FILE=$(get_package_manager_file "pacman")
    if command_exists pacman; then
        if [ "$DRY_RUN" = true ]; then
            echo "üì¶ Would dump Pacman packages to $PACMAN_FILE using: pacman -Qqe"
        else
            echo "üì¶ Dumping Pacman packages to $PACMAN_FILE..."
            pacman -Qqe > "$PACKAGES_DIR/$PACMAN_FILE"
            echo "‚úÖ Pacman packages dumped"
        fi
    else
        if [ "$DRY_RUN" = true ]; then
            echo "‚ö†Ô∏è  Would skip Pacman (pacman command not found)"
        fi
    fi
fi

# Yay/AUR (Arch Linux)
if is_package_manager_enabled "yay"; then
    AUR_FILE=$(get_package_manager_file "yay")
    if command_exists yay; then
        if [ "$DRY_RUN" = true ]; then
            echo "üì¶ Would dump AUR packages (yay) to $AUR_FILE using: yay -Qqm"
        else
            echo "üì¶ Dumping AUR packages (yay) to $AUR_FILE..."
            yay -Qqm > "$PACKAGES_DIR/$AUR_FILE"
            echo "‚úÖ AUR packages (yay) dumped"
        fi
    elif command_exists pacman; then
        if [ "$DRY_RUN" = true ]; then
            echo "üì¶ Would dump AUR packages (pacman) to $AUR_FILE using: pacman -Qqm"
        else
            echo "üì¶ Dumping AUR packages (pacman) to $AUR_FILE..."
            pacman -Qqm > "$PACKAGES_DIR/$AUR_FILE"
            echo "‚úÖ AUR packages (pacman) dumped"
        fi
    else
        if [ "$DRY_RUN" = true ]; then
            echo "‚ö†Ô∏è  Would skip AUR packages (neither yay nor pacman found)"
        fi
    fi
fi

# Flatpak
if is_package_manager_enabled "flatpak"; then
    FLATPAK_FILE=$(get_package_manager_file "flatpak")
    if command_exists flatpak; then
        if [ "$DRY_RUN" = true ]; then
            echo "üì¶ Would dump Flatpak packages to $FLATPAK_FILE using: flatpak list --app --columns=application"
        else
            echo "üì¶ Dumping Flatpak packages to $FLATPAK_FILE..."
            flatpak list --app --columns=application > "$PACKAGES_DIR/$FLATPAK_FILE"
            echo "‚úÖ Flatpak packages dumped"
        fi
    else
        if [ "$DRY_RUN" = true ]; then
            echo "‚ö†Ô∏è  Would skip Flatpak (flatpak command not found)"
        fi
    fi
fi

# Show summary
echo ""
if [ "$DRY_RUN" = true ]; then
    echo "üîç DRY RUN complete for profile: $PROFILE_NAME"
    echo "üìÅ Package files would be saved to: $PACKAGES_DIR"
    echo "üí° Run without --dry-run to actually execute the commands"
else
    echo "üéâ Package dump complete for profile: $PROFILE_NAME"
    echo "üìÅ Package files saved to: $PACKAGES_DIR"
    if [ -d "$PACKAGES_DIR" ]; then
        echo "üìã Generated files:"
        ls -la "$PACKAGES_DIR" | grep -v '^d' | awk '{print "   " $9 " (" $5 " bytes)"}'
    fi
fi